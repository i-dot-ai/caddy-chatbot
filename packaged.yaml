AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: '10ds-advice-bot

  Sample SAM Template for advice-bot

  '
Globals:
  Function:
    Timeout: 100
Parameters:
  AnthropicApiKey:
    Type: String
    Description: API Key for Anthropic
Resources:
  ProcessChatMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1ounrlhqiy69j/e352daa09a4b3d2151377d9b72cb1e37
      Handler: chat.lambda_handler
      PackageType: Image
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - ProcessChatMessageFunctionIamRole
        - Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          ANTHROPIC_API_KEY:
            Ref: AnthropicApiKey
          KENDRA_INDEX_ID:
            Fn::GetAtt:
            - MyKendraIndex
            - Arn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: KendraQueryPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kendra:Query
            Resource:
              Fn::GetAtt:
              - MyKendraIndex
              - Arn
      Events:
        ProcessChatMessage:
          Type: Api
          Properties:
            Path: /chat
            Method: post
    Metadata:
      SamResourceId: ProcessChatMessageFunction
  ProcessChatMessageFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: AccessDynamoDBMessageTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
            Resource:
              Fn::GetAtt:
              - MessagesTable
              - Arn
    Metadata:
      SamResourceId: ProcessChatMessageFunctionIamRole
  SuperviseFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: DynamoDBStreamReadPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource:
              Fn::GetAtt:
              - MessagesTable
              - StreamArn
      - PolicyName: LambdaLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
    Metadata:
      SamResourceId: SuperviseFunctionIamRole
  SuperviseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-1ounrlhqiy69j/d9e63afb988aab1a085349a013a2f634
      Handler: lambda.lambda_handler
      Runtime: python3.11
      PackageType: Image
      Role:
        Fn::GetAtt:
        - SuperviseFunctionIamRole
        - Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          DB_ACCESS_KEY_ID: some_key
          DB_SECRET_ACCESS_KEY: other_key
          DB_ENDPOINT: db_endpoint
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - MessagesTable
              - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 5
    Metadata:
      SamResourceId: SuperviseFunction
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CaddyUsers
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Metadata:
      SamResourceId: UsersTable
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CaddyMessages
      AttributeDefinitions:
      - AttributeName: messageId
        AttributeType: S
      KeySchema:
      - AttributeName: messageId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: MessagesTable
  MyKendraIndex:
    Type: AWS::Kendra::Index
    Properties:
      Description: My Kendra Index for enterprise search.
      Edition: DEVELOPER_EDITION
      Name: MyKendraIndex
      RoleArn:
        Fn::GetAtt:
        - KendraRole
        - Arn
    Metadata:
      SamResourceId: MyKendraIndex
  KendraRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: KendraServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - kendra.amazonaws.com
          Action:
          - sts:AssumeRole
    Metadata:
      SamResourceId: KendraRole
  KendraCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: KendraCrawlerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - kendra.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: KendraCrawlerPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource:
            - arn:aws:s3:::caddy-kendra-storage-bucket/*
            - arn:aws:s3:::caddy-kendra-storage-bucket
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
            - arn:aws:logs:*:*:log-group:/aws/kendra/*
    Metadata:
      SamResourceId: KendraCrawlerRole
  KendraWebCrawler:
    Type: AWS::Kendra::DataSource
    Properties:
      RoleArn:
        Fn::GetAtt:
        - KendraCrawlerRole
        - Arn
      Schedule: cron(0 0 ? * 1 *)
      IndexId:
        Ref: MyKendraIndex
      DataSourceConfiguration:
        WebCrawlerConfiguration:
          UrlInclusionPatterns:
          - .*https://www.gov.uk/.*
          - .*https://www.citizensadvice.org.uk/.*
          Urls:
            SeedUrlConfiguration:
              SeedUrls:
              - https://www.gov.uk/
              - https://www.citizensadvice.org.uk/
      Name: KendraDocsDS
      Type: WEBCRAWLER
    Metadata:
      SamResourceId: KendraWebCrawler
  KendraBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: caddy-kendra-storage-bucket
    Metadata:
      SamResourceId: KendraBucket
Outputs:
  ReceiveMessageAPI:
    Description: API Gateway endpoint URL for Prod stage for Receive Message function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/receive_message/
  ProcessChatMessageFunction:
    Description: ProcessChatMessageFunction ARN
    Value:
      Fn::GetAtt:
      - ProcessChatMessageFunction
      - Arn
  ProcessChatMessageFunctionIamRole:
    Description: Implicit IAM Role created for ProcessChatMessageFunction function
    Value:
      Fn::GetAtt:
      - ProcessChatMessageFunctionIamRole
      - Arn
  SuperviseFunction:
    Description: SuperviseFunction ARN
    Value:
      Fn::GetAtt:
      - SuperviseFunction
      - Arn
  SuperviseFunctionIamRole:
    Description: Implicit IAM Role created for SuperviseFunction function
    Value:
      Fn::GetAtt:
      - SuperviseFunctionIamRole
      - Arn
  MessagesTable:
    Description: Mesages Table ARN
    Value:
      Fn::GetAtt:
      - MessagesTable
      - Arn
  UsersTable:
    Description: Users Table ARN
    Value:
      Fn::GetAtt:
      - UsersTable
      - Arn
  MyKendraIndex:
    Description: Kendra index
    Value:
      Fn::GetAtt:
      - MyKendraIndex
      - Arn
  KendraCrawlerRole:
    Description: Kendra crawler role
    Value:
      Fn::GetAtt:
      - KendraCrawlerRole
      - Arn
