AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Caddy - AWS Cloudformation Template

Globals:
  Function:
    Timeout: 100

Parameters:
  StageName:
    Type: String
    Description: Name of the stage (e.g., develop, prod)
  UserTableName:
    Type: String
    Description: Name of the DynamoDB table for users
  MessageTableName:
    Type: String
    Description: Name of the DynamoDB table for messages
  ResponsesTableName:
    Type: String
    Description: Name of the DynamoDB table for responses
  OfficesTableName:
    Type: String
    Description: Name of the DynamoDB table for responses
  EvaluationTableName:
    Type: String
    Description: Name of the DynamoDB table for evaluation
  OpensearchUrl:
    Type: String
    Description: Url of Opensearch Index
  CaddyServiceAccountId:
    Type: String
    Description: Service account id for Caddy
  CaddySupervisorServiceAccountId:
    Type: String
    Description: Service account id for Caddy Supervisor

Globals:
  Api:
    OpenApiVersion: 3.0.1

Resources:
  CaddyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'caddy-api-gateway-${StageName}'
      StageName: !Ref StageName

  CaddyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CaddyApi
    Description: "CaddyApi Deployment"

  CaddyECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'caddy-ecr-repository-${StageName}'
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"

  ConversationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'conversations-${StageName}'
      PackageType: Image
      ImageConfig:
        Command: ["conversations.lambda_handler"]
      ImageUri: !GetAtt CaddyECR.RepositoryUri
      Timeout: 120
      Tracing: Active
      MemorySize: 1024
      EphemeralStorage:
        Size: 1024
      Role: !GetAtt ConversationsFunctionIamRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE_NAME: !Ref MessageTableName
          RESPONSES_TABLE_NAME: !Ref ResponsesTableName
          USERS_TABLE_NAME: !Ref UserTableName
          OFFICES_TABLE_NAME: !Ref OfficesTableName
          EVALUATION_TABLE_NAME: !Ref EvaluationTableName
          CADDY_SERVICE_ACCOUNT_ID: !Ref CaddyServiceAccountId
          CADDY_SUPERVISOR_SERVICE_ACCOUNT_ID: !Ref CaddySupervisorServiceAccountId
          STAGE: !Ref StageName
      Events:
        Conversations:
          Type: Api
          Properties:
            Path: /chat
            Method: post
            RestApiId: !Ref CaddyApi
    Metadata:
      DockerContext: caddy_chatbot/conversations/
      Dockerfile: Dockerfile

  ConversationsFunctionIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub 'ConversationsFunctionRole-${StageName}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub 'ConversationsLambdaLoggingPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
          - PolicyName: !Sub 'ConversationsDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: !GetAtt ResponsesTable.Arn
          - PolicyName: !Sub 'ConversationsLambdaInvokerPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: !GetAtt LlmFunction.Arn
          - PolicyName: !Sub 'ConversationsCaddySecrets-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue # pragma: allowlist secret
                  Resource: '*'
          - PolicyName: !Sub 'ConversationsOfficesDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: !GetAtt OfficesTable.Arn
          - PolicyName: !Sub 'ConversationsUsersDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: !GetAtt UsersTable.Arn
          - PolicyName: !Sub 'ConversationsEvaluationDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                    - dynamodb:GetItem
                  Resource: !GetAtt EvaluationTable.Arn

  LlmFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'llm-${StageName}'
      PackageType: Image
      ImageConfig:
        Command: ["llm.lambda_handler"]
      ImageUri: !GetAtt CaddyECR.RepositoryUri
      Timeout: 120
      MemorySize: 2048
      Tracing: Active
      EphemeralStorage:
        Size: 2048
      Role: !GetAtt LlmFunctionIamRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE_NAME: !Ref MessageTableName
          RESPONSES_TABLE_NAME: !Ref ResponsesTableName
          USERS_TABLE_NAME: !Ref UserTableName
          OFFICES_TABLE_NAME: !Ref OfficesTableName
          HF_HOME: "/tmp"
          XDG_CACHE_HOME: "/tmp"
          OPENSEARCH_HTTPS: !Ref OpensearchUrl
          OPENSEARCH_INDEX: "caddy_vector_index"
          EVALUATION_TABLE_NAME: !Ref EvaluationTableName
          CADDY_SERVICE_ACCOUNT_ID: !Ref CaddyServiceAccountId
          CADDY_SUPERVISOR_SERVICE_ACCOUNT_ID: !Ref CaddySupervisorServiceAccountId
          STAGE: !Ref StageName
    Metadata:
      DockerContext: caddy_chatbot/llm/
      Dockerfile: Dockerfile

  LlmFunctionIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub 'LlmFunctionRole-${StageName}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub 'LlmLambdaLoggingPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
          - PolicyName: !Sub 'LlmDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: !GetAtt MessagesTable.Arn
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: !GetAtt ResponsesTable.Arn
          - PolicyName: !Sub 'BedrockInvokerPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - bedrock:InvokeModel
                  Resource: '*'
          - PolicyName: !Sub 'LlmLambdaInvokerPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: !GetAtt SuperviseFunction.Arn
          - PolicyName: !Sub 'LlmCaddySecrets-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue # pragma: allowlist secret
                  Resource: '*'
          - PolicyName: !Sub 'LlmOfficesDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: !GetAtt OfficesTable.Arn
          - PolicyName: !Sub 'LlmEvaluationDynamoPolicy-${StageName}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource: !GetAtt EvaluationTable.Arn

  SuperviseFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SuperviseFunctionRole-${StageName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub 'SuperviseLambdaLoggingPolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: !Sub 'SuperviseSecrets-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue # pragma: allowlist secret
                Resource: '*'
        - PolicyName: !Sub 'UserManagementPolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt UsersTable.Arn
        - PolicyName: !Sub 'ResponseUpdatePolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt ResponsesTable.Arn
        - PolicyName: !Sub 'SuperviseOfficesDynamoPolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt OfficesTable.Arn
        - PolicyName: !Sub 'SuperviseUsersDynamoPolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt UsersTable.Arn
        - PolicyName: !Sub 'SuperviseEvaluationDynamoPolicy-${StageName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt EvaluationTable.Arn

  SuperviseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'supervise-${StageName}'
      PackageType: Image
      ImageConfig:
        Command: ["supervise.lambda_handler"]
      ImageUri: !GetAtt CaddyECR.RepositoryUri
      Timeout: 120
      Tracing: Active
      Role: !GetAtt SuperviseFunctionIamRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE_NAME: !Ref MessageTableName
          RESPONSES_TABLE_NAME: !Ref ResponsesTableName
          USERS_TABLE_NAME: !Ref UserTableName
          OFFICES_TABLE_NAME: !Ref OfficesTableName
          EVALUATION_TABLE_NAME: !Ref EvaluationTableName
          CADDY_SERVICE_ACCOUNT_ID: !Ref CaddyServiceAccountId
          CADDY_SUPERVISOR_SERVICE_ACCOUNT_ID: !Ref CaddySupervisorServiceAccountId
          STAGE: !Ref StageName
      Events:
        ProcessSupervisionResponse:
          Type: Api
          Properties:
            Path: /supervision
            Method: post
            RestApiId: !Ref CaddyApi
    Metadata:
      DockerContext: caddy_chatbot/supervise/
      Dockerfile: Dockerfile

  UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref UserTableName
        AttributeDefinitions:
          - AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - AttributeName: userEmail
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: !Ref MessageTableName
          AttributeDefinitions:
          - AttributeName: threadId
            AttributeType: S
          KeySchema:
          - AttributeName: threadId
            KeyType: HASH
          ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES

  ResponsesTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: !Ref ResponsesTableName
          AttributeDefinitions:
          - AttributeName: threadId
            AttributeType: S
          KeySchema:
          - AttributeName: threadId
            KeyType: HASH
          ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES

  OfficesTable:
    Type: AWS::DynamoDB::Table
    Properties:
        TableName: !Ref OfficesTableName
        AttributeDefinitions:
        - AttributeName: emailDomain
          AttributeType: S
        KeySchema:
        - AttributeName: emailDomain
          KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES

  EvaluationTable:
    Type: AWS::DynamoDB::Table
    Properties:
        TableName: !Ref EvaluationTableName
        AttributeDefinitions:
        - AttributeName: threadId
          AttributeType: S
        KeySchema:
        - AttributeName: threadId
          KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
