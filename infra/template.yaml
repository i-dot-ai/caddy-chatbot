AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Caddy - AWS Cloudformation Template

Parameters:
  StageName:
    Type: String
    Description: Name of the stage (e.g., dev, prod)
    AllowedValues:
      - dev
      - prod
  UserTableName:
    Type: String
    Description: Name of the DynamoDB table for users
  MessageTableName:
    Type: String
    Description: Name of the DynamoDB table for messages
  ResponsesTableName:
    Type: String
    Description: Name of the DynamoDB table for responses
  OfficesTableName:
    Type: String
    Description: Name of the DynamoDB table for responses
  EvaluationTableName:
    Type: String
    Description: Name of the DynamoDB table for evaluation
  CaddyServiceAccountSecretArn:
    Type: String
    Description: AWS Arn for Caddy service account
  CaddySupervisorServiceAccountSecretArn:
    Type: String
    Description: AWS Arn for Caddy Supervisor service account
  CaddyImage:
    Type: String
    Description: Caddy container image
  CaddyGoogleCloudProject:
    Type: String
    Description: Google Cloud Project Id
  CaddySupervisorGoogleCloudProject:
    Type: String
    Description: Google Cloud Project Id
  LLM:
    Type: String
    Description: LLM to use
  DomainName:
    Type: String
    Description: Domain for Cert
  OpensearchUrl:
    Type: String
    Description: Url for Opensearch
  OpensearchIndex:
    Type: String
    Description: Index for Opensearch
  MicrosoftAppIdSecretArn:
    Type: String
    Description: Secret Arn for App Id for Teams integration
  MicrosoftAppPasswordSecretArn:
    Type: String
    Description: Secret Arn for App password for Teams integration

Resources:
  CaddyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  CaddyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      VpcId: !Ref CaddyVPC
      CidrBlock: 10.0.0.0/24

  CaddyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2b
      VpcId: !Ref CaddyVPC
      CidrBlock: 10.0.1.0/24
  CaddyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      VpcId: !Ref CaddyVPC
      CidrBlock: 10.0.2.0/24

  CaddyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt CaddyElasticIP.AllocationId
      SubnetId: !Ref CaddyPublicSubnet1

  CaddyInternetGateway:
    Type: AWS::EC2::InternetGateway

  CaddyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CaddyVPC
      InternetGatewayId: !Ref CaddyInternetGateway

  CaddySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub caddy-security-group-${StageName}
      GroupDescription: Security group for Caddy ECS Fargate
      VpcId: !Ref CaddyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  CaddyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CaddyVPC

  CaddyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CaddyVPC

  CaddyInternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref CaddyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CaddyInternetGateway

  CaddyPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CaddyPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CaddyNATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CaddyPrivateRouteTable
      SubnetId: !Ref CaddyPrivateSubnet1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CaddyPublicRouteTable
      SubnetId: !Ref CaddyPublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CaddyPublicRouteTable
      SubnetId: !Ref CaddyPublicSubnet2

  CaddyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub caddy-loadbalancer-${StageName}
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref CaddyPublicSubnet1
        - !Ref CaddyPublicSubnet2
      SecurityGroups:
        - !Ref CaddySecurityGroup

  CaddyHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CaddyLoadBalancer
      Port: 443
      Protocol: HTTPS
      MutualAuthentication:
        Mode: passthrough
      Certificates:
        - CertificateArn: !Ref CaddyCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CaddyTargetGroup

  CaddyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName

  CaddyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: CaddyLoadBalancer
    Properties:
      Name: !Sub caddy-targetgroup-${StageName}
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      Matcher:
        HttpCode: 200
      VpcId: !Ref CaddyVPC

  CaddyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub caddy-task-${StageName}
      ExecutionRoleArn: !GetAtt CaddyRole.Arn
      TaskRoleArn: !GetAtt CaddyRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4096
      Memory: 8192
      ContainerDefinitions:
        - Name: caddy-container
          Image: !Ref CaddyImage
          PortMappings:
            - ContainerPort: 80
          Secrets:
            - Name: CADDY_SERVICE_ACCOUNT
              ValueFrom: !Ref CaddyServiceAccountSecretArn
            - Name: CADDY_SUPERVISOR_SERVICE_ACCOUNT
              ValueFrom: !Ref CaddySupervisorServiceAccountSecretArn
            - Name: MicrosoftAppId
              ValueFrom: !Ref MicrosoftAppIdSecretArn
            - Name: MicrosoftAppPassword
              ValueFrom: !Ref MicrosoftAppPasswordSecretArn
          Environment:
            - Name: MESSAGES_TABLE_NAME
              Value: !Ref MessageTableName
            - Name: RESPONSES_TABLE_NAME
              Value: !Ref ResponsesTableName
            - Name: USERS_TABLE_NAME
              Value: !Ref UserTableName
            - Name: OFFICES_TABLE_NAME
              Value: !Ref OfficesTableName
            - Name: EVALUATION_TABLE_NAME
              Value: !Ref EvaluationTableName
            - Name: STAGE
              Value: !Ref StageName
            - Name: HF_HOME
              Value: /tmp
            - Name: XDG_CACHE_HOME
              Value: /tmp
            - Name: LLM
              Value: !Ref LLM
            - Name: OPENSEARCH_HTTPS
              Value: !Ref OpensearchUrl
            - Name: OPENSEARCH_INDEX
              Value: !Ref OpensearchIndex
            - Name: CADDY_GOOGLE_CLOUD_PROJECT
              Value: !Ref CaddyGoogleCloudProject
            - Name: CADDY_SUPERVISOR_GOOGLE_CLOUD_PROJECT
              Value: !Ref CaddySupervisorGoogleCloudProject
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CaddyLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: caddy-container

  CaddyCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub caddy-cluster-${StageName}

  CaddyService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref CaddyCluster
      ServiceName: !Sub caddy-service-${StageName}
      TaskDefinition: !Ref CaddyTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref CaddySecurityGroup
          Subnets:
            - !Ref CaddyPrivateSubnet1
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers:
        - ContainerName: caddy-container
          ContainerPort: 80
          TargetGroupArn: !Ref CaddyTargetGroup

  CaddyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/caddy-log-group-${StageName}
      RetentionInDays: 7

  CaddyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CaddyRole-${StageName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub CaddyECRPolicy-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
        - PolicyName: !Sub CaddyLoggingPolicy-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: !Sub CaddyDynamoPolicy-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt MessagesTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource: !GetAtt ResponsesTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OfficesTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt UsersTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !GetAtt EvaluationTable.Arn
        - PolicyName: !Sub BedrockInvokerPolicy-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: !Sub CaddySecrets-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue # pragma: allowlist secret
                Resource: '*'
        - PolicyName: !Sub CaddyAOSS-${StageName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: '*'

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserTableName
      AttributeDefinitions:
        - AttributeName: userEmail
          AttributeType: S
      KeySchema:
        - AttributeName: userEmail
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MessageTableName
      AttributeDefinitions:
        - AttributeName: threadId
          AttributeType: S
      KeySchema:
        - AttributeName: threadId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ResponsesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ResponsesTableName
      AttributeDefinitions:
        - AttributeName: threadId
          AttributeType: S
      KeySchema:
        - AttributeName: threadId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  OfficesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref OfficesTableName
      AttributeDefinitions:
        - AttributeName: emailDomain
          AttributeType: S
      KeySchema:
        - AttributeName: emailDomain
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  EvaluationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref EvaluationTableName
      AttributeDefinitions:
        - AttributeName: threadId
          AttributeType: S
      KeySchema:
        - AttributeName: threadId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
